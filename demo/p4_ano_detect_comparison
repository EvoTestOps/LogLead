
import sys
import time
sys.path.append('..')
import polars as pl
import loglead.loader as load, loglead.enricher as er, loglead.anomaly_detection as ad
full_data = "/home/ubuntu/Datasets"
private_data ="../private_data"


loader = load.HDFSLoader(filename=f"{full_data}/hdfs/HDFS.log", 
                                            labels_file_name=f"{full_data}/hdfs/anomaly_label.csv")


loader.execute()

#df = loader.reduce_dataframes(0.001)
df = loader.reduce_dataframes(0.1)
df_seq =  loader.df_sequences

enricher = er.EventLogEnricher(df)
df = enricher.normalize()
df = enricher.words(column="e_message_normalized")
df = enricher.parse_drain()
df = enricher.parse_spell()
df = enricher.parse_lenma()
df = enricher.create_neural_emb()

df.write_parquet(f"{private_data}/P4_Parsed_hdfs_events_01.parquet")
df_seq.write_parquet(f"{private_data}/P4_Parsed_hdfs_seqs_01.parquet")


seq_enricher = er.SequenceEnricher(df = df, df_sequences = df_seq)
seq_enricher.tokens("e_words")
seq_enricher.events("e_event_id")
seq_enricher.events("e_event_lenma_id")
seq_enricher.events("e_event_spell_id")
seq_enricher.embeddings("e_bert_emb")

#Using tokens(words) from each sequence 
# Suppress ConvergenceWarning
import warnings
from sklearn.exceptions import ConvergenceWarning
warnings.filterwarnings("ignore", category=ConvergenceWarning)
#Disable unsupervised
disable = ["train_IsolationForest", "train_LOF","train_KMeans", "train_OneClassSVM", "train_RarityModel"]
sad = ad.SupervisedAnomalyDetection(item_list_col="e_words")
sad.test_train_split (seq_enricher.df_sequences, test_frac=0.5)
sad.evaluate_all_ads(disabled_methods=disable)

sad.item_list_col = "e_event_id"
sad.test_train_split (seq_enricher.df_sequences, new_split=False)
sad.evaluate_all_ads(disabled_methods=disable)

sad.item_list_col ="e_event_lenma_id"
sad.test_train_split (seq_enricher.df_sequences, new_split=False)
sad.evaluate_all_ads(disabled_methods=disable)

sad.item_list_col ="e_event_spell_id"
sad.test_train_split (seq_enricher.df_sequences, new_split=False)
sad.evaluate_all_ads(disabled_methods=disable)

sad.item_list_col =None
sad.emb_list_col = "e_bert_emb"
sad.test_train_split (seq_enricher.df_sequences, new_split=False)
sad.evaluate_all_ads(disabled_methods=disable)
