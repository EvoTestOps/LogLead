import loader as load, enricher as er, anomaly_detection as ad

#Which one to run. Only one true. 
b_hadoop = False
b_hdfs = True
b_profilence = False


# Loading HDFS Logs----------------------------------------------------------------
#hdfs_processor = load.HDFSLoader(filename="../../../Datasets/hdfs/HDFS.log", 
#                                     labels_file_name="../../../Datasets/hdfs/anomaly_label.csv")
#df = hdfs_processor.execute()
#smaller hdfs for faster running. Parsing of whole HDFS takes about 11min
#df = hdfs_processor.reduce_dataframes(frac=0.2)

df = None
df_seq = None
preprocessor = None

if (b_hadoop):
       preprocessor = load.HadoopLoader(filename="../../../Datasets/hadoop/",
                                                 filename_pattern  ="*.log",
                                                 labels_file_name="../../../Datasets/hadoop/abnormal_label_accurate.txt")

elif (b_hdfs):
       preprocessor = load.HDFSLoader(filename="../../../Datasets/hdfs/HDFS.log", 
                                          labels_file_name="../../../Datasets/hdfs/anomaly_label.csv")

elif (b_profilence):
       preprocessor = load.ProLoader(filename="../../../Datasets/profilence/*.txt")

df = preprocessor.execute()
if (not b_hadoop):
    df = preprocessor.reduce_dataframes(frac=0.30)
df_seq = preprocessor.df_sequences

#-Event enrichment----------------------------------------------
# Using regexes for normalization
enricher = er.EventLogEnricher(df)

#Drain parsing with LogLEAD masking 
#Faster by 60%
df = enricher.normalize()
df = enricher.parse_drain(reparse=True)
#This is equal to below. With Drainmasking Compared to this
df = enricher.parse_drain(drain_masking=True,reparse=True)

#Check the results
import polars as pl
#Executing this show the normalized log message
df.select(pl.col("e_message_normalized"))[0,0]
#This is the original log message
df.select(pl.col("m_message"))[0,0]
